Hello World Examples
1
###
# Don't forget to run with the .dat
# e.g. ./tape-device hello_world_examples.tape hello_world_examples.dat
###
.strings
ex_string=This is from a string in the .strings section:
greeting=Hello, World!
ex_mem=This is from data loaded into memory and read back out as chars:
ex_file=This is from data loaded from a file and read out as chars:
file_error=No input file, check note at top of tasm file
.ops
        fchk prog
        prtln
        prtd file_error
        prtln
        halt
        #Print string data example
prog:   PRTD ex_string     #print string named ex_string
        PRTLN              #newline
        PRTD greeting      #print string named greeting
        PRTLN              #newline

        #Letter values in ASCII
        const H 72
        const e 101
        const l 108
        const o 111
        const W 87
        const r 114
        const d 100
        const space 32

        #Prepare memory
        cpy acc H          #set ACC to const H (72)
        memw @0            #write value in ACC to memory address 0
        cpy acc e          #set ACC to const e
        memw @1            #write value in ACC to memory address 1
        cpy acc l          #set ACC to const l
        memw @2            #write value in ACC to memory address 2
        memw @3            #write value in ACC to memory address 3
        memw @9            #write value in ACC to memory address 9
        cpy acc o          #set ACC to const o
        memw @4            #write value in ACC to memory address 4
        memw @7            #write value in ACC to memory address 7
        cpy acc space      #set ACC to const space
        memw @5            #write value in ACC to memory address 5
        cpy acc W          #set ACC to const W
        memw @6            #write value in ACC to memory address 6
        cpy acc r          #set ACC to const r
        memw @8            #write value in ACC to memory address 8
        cpy acc d          #set ACC to const d
        memw @10           #write value in ACC to memory address 10

        #Print from memory
        PRTD ex_mem        #print string named ex_mem
        PRTLN              #newline
        cpya1 @11          #set A1 to memory address 11
        cpya0 @0           #set A0 to memory address 0
print:  memr a0            #read value from memory at address in A0 and set in ACC
        prtc acc           #print value in ACC as ASCII
        inc a0             #increment value in A0
        cmpar              #compare A0 and A1
        jne print          #if they were not equal jump to print
        PRTLN              #newline

        #Clear memory
        cpya1 @11          #set A1 to memory address 11
        cpya0 @0           #set A0 to memory address 0
        cpy acc 0          #set ACC to 0
clear:  memw a0            #write value in ACC to memory at address in A0
        inc A0             #increment A0
        cmpar              #compare A0 and A1
        jne clear          #if they were not equal jump to clear

        #Read from file
        #Program will crash if file not available
        prtd ex_file       #print string named ex_file
        prtln              #newline
        fopen              #Open file
        cpy acc 10         #Set ACC to 10, this is used by filer as the max byte read count
        filer @0           #Read bytes from read and save in memory at address in A0
        cpya1 @10          #set A1 to memory address 11
        cpya0 @0           #set A0 to memory address 0
fprint: memr a0            #read value from memory at address in A0 and set in ACC
        prtc acc           #print value in ACC as ASCII
        inc a0             #increment value in A0
        cmpar              #compare A0 and A1
        jne fprint         #if they were not equal jump to fprint
        PRTLN              #newline

